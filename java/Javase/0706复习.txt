是什么			有什么用		优缺点			怎么用   		什么时候用
SE重点:
	方法:
		作用: 封装代码 , 提高代码的复用性
		方法是一个类中封装的体现
		有返回值  没有返回值  参数   返回值   修饰符   return  重载     
		方法名+参数列表==>方法签名(定位唯一)
		break和continue,return之间的区别:
			引用场景:
			作用:
		重载和重写的区别:
			重载: 同一个类中		多个方法		方法名相同,参数列表不同
			重写: 不同的类			继承|实现关系		方法签名相同
		继承和实现的区别:
	
	变量 和 数组-->存储数据
	变量: 只能存储单个数据
	数组: 存储多个数据
		数据类型相同
		容器
		长度一旦确定不开可改变
		引用数据类型
		索引  有序    数据根据索引操作数组中的内容效率高
	      缺点: 不够灵活,不变后期维护
	      有点: 根据索引操作...
	数组: 相同数据类型的有序集合
		容器

	
	面向对象:
	面向过程:
	面向对象是依托于面向过程的
	
	自定义类
	构造器: 
		new关键字是创建对象
			1.堆内存中开辟空间
			2.成员变量会跟随对象进入到堆内存中,并复默认值
			3.调用构造器为对象初始化信息
			4.讲地址返回给引用
		作用:就是为对象初始化信息
		特殊的方法
		定义: 修饰符  类名(){}
	this 和 super
	static 静态的
	block : 块
	修饰符 : private default protected public   
		是成员修饰符:只能修饰成员不能修饰局部 
		能修饰类的为private public
	
	final : 最终的
		
		
	super :
	
	重写 : 
	Object 类 :  toString()	把对象以字符串的形式打印(根据需求重写)	
	equals() 和 == 的区别
		比较是否相等
		== 默认 比较基本数据类型的数据值,引用数据类型的地址值
		equals  默认使用Object的equals的方法
			public boolean equals(Object obj) {
				return (this == obj);
			}
			可以在子类中重写,让它比较对象内容(成员属性值),而非比较地址
	instanceOf
	抽象类
	接口
	
		
	
	
	封装:  隐藏内部的实现细节,对外提供公共的访问方式
	私有就是封装,封装不仅仅是私有
		
	继承:
		简化代码
		子类一旦继承父类可以使用父类中的内容
	
	多态:  一种事物的多种形态
		前提: 类的继承  接口的实现
		最终体现: 父类的引用指向子类多态
		使用: 
			编译看类型  运行找对象--成员方法
			编译运行都看类型      --成员变量
			如果想要调用子类独有方法,要向下转型
	
	instanceOf: 
	抽象类 : 
		抽象方法: 不知道如何实现这个方法体,没有方法体的方法就是抽象方法
		抽象方法只能存在于抽象类中
	接口:
		功能的集合
		类只能单继承,接口可以多实现
		解耦
		方便后期维护
		
		1.7及之前
			公共的静态的常量
			公共的抽象的方法
			
		1.8新增
			默认方法  被default修饰的方法,可以有方法体
			static方法  可以有方法体
			
	javabean: 一系列的模版类
	 Person (姓名  升高  年龄  吃饭  睡觉...)	
	javabean的书写规范:
		至少存在一个空构造
		属性私有化,并提供公共的访问方式
		类应该是公共的public
		重写toString  和 equals()
		实现序列化接口
		
	
	异常 : 异常   分类   处理****    自定义异常
		运行时异常: if(最常用)   try   throws
		编译时异常:  try   throws
		异常不处理会影响下面代码执行
		
		
	
		
	常用类
		String*** 字符串  
		StringBuilder 线程安全较高
		StringBuffer 线程安全,效率较低
		包装类  Integer i =1;   int i2 = i;
		日期类
		Math
		File 文件
		
	IO  流
		流就是管道,传输数据
		流的分类:
			流向分: 输出和输出
			操作单元分: 字节  和   字符
			按照功能分: 节点  和    功能流(缓冲流,转换流...)
		重点 : 字节流    万能流
		
	
	内部类
		匿名内部类  -> lambda表达式
		
		
	